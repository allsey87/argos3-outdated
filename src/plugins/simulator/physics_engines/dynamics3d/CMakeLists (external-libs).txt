#
# Compile Bullet Physics Engine 
#

#
# Headers
#
# Headers for the bullet physics engine
if(ARGOS_USE_DOUBLE)
  add_definitions(-DBT_USE_DOUBLE_PRECISION)
  set( BULLET_DOUBLE_DEF "-DBT_USE_DOUBLE_PRECISION")
  set(PRECISION_PATH dp)
else(ARGOS_USE_DOUBLE)
   set(PRECISION_PATH sp)
endif(ARGOS_USE_DOUBLE)

SET(BULLET_PHYSICS_SOURCE_DIR /home/allsey87/Workspace/bullet-2.81-rev2613)

FIND_LIBRARY(BULLET_DYNAMICS_LIBRARY
  NAMES BulletDynamics
  PATHS 
  ${BULLET_PHYSICS_SOURCE_DIR}/build/${PRECISION_PATH}/src/BulletDynamics
)

FIND_LIBRARY(BULLET_COLLISION_LIBRARY
  NAMES BulletCollision
  PATHS
  ${BULLET_PHYSICS_SOURCE_DIR}/build/${PRECISION_PATH}/src/BulletCollision
)

FIND_LIBRARY(BULLET_LINEARMATH_LIBRARY
  NAMES LinearMath 
  PATHS
  ${BULLET_PHYSICS_SOURCE_DIR}/build/${PRECISION_PATH}/src/LinearMath
)

IF(BULLET_DYNAMICS_LIBRARY AND BULLET_COLLISION_LIBRARY AND BULLET_LINEARMATH_LIBRARY)
   SET(BULLET_LIBRARIES ${BULLET_DYNAMICS_LIBRARY} ${BULLET_COLLISION_LIBRARY} ${BULLET_LINEARMATH_LIBRARY}) 
   MESSAGE(STATUS "Found Bullet libraries")
ELSE(BULLET_DYNAMICS_LIBRARY AND BULLET_COLLISION_LIBRARY AND BULLET_LINEARMATH_LIBRARY)
   MESSAGE(STATUS "Could NOT find Bullet libraries")
ENDIF(BULLET_DYNAMICS_LIBRARY AND BULLET_COLLISION_LIBRARY AND BULLET_LINEARMATH_LIBRARY)

MESSAGE("!! Bullet Libs = ${BULLET_DYNAMICS_LIBRARY}, ${BULLET_COLLISION_LIBRARY}, ${BULLET_LINEARMATH_LIBRARY}")

INCLUDE_DIRECTORIES(
${BULLET_PHYSICS_SOURCE_DIR}/src
)

#
# Headers
#
# Headers of the 3d dynamics physics engine
set(ARGOS3_HEADERS_PLUGINS_SIMULATOR_PHYSICS_ENGINES_DYNAMICS3D
  dynamics3d_body.h
  dynamics3d_joint.h
  dynamics3d_plugin.h
  dynamics3d_box_model.h
  dynamics3d_cylinder_model.h
  dynamics3d_model.h
  dynamics3d_engine.h)
# Headers of the sphere entity (provided by the dynamics3d engine)
set(ARGOS3_HEADERS_PLUGINS_SIMULATOR_PHYSICS_ENGINES_DYNAMICS3D_SPHERE
  sphere/dynamics3d_sphere_model.h
  sphere/sphere_entity.h)
  
#
# Source files
#
# Dynamics 3D source files
set(ARGOS3_SOURCES_PLUGINS_SIMULATOR_PHYSICS_ENGINES_DYNAMICS3D
  dynamics3d_body.cpp
  dynamics3d_joint.cpp
  dynamics3d_plugin.cpp
  dynamics3d_box_model.cpp
  dynamics3d_cylinder_model.cpp
  dynamics3d_model.cpp
  dynamics3d_engine.cpp)
# Sphere entity source files (provided by the dynamics3d engine)
set(ARGOS3_SOURCES_PLUGINS_SIMULATOR_PHYSICS_ENGINES_DYNAMICS3D_SPHERE
  sphere/dynamics3d_sphere_model.cpp
  sphere/sphere_entity.cpp)

# Compile the graphical visualization for the sphere only if the necessary 
# libraries have been found
include(ARGoSCheckQTOpenGL)
if(ARGOS_COMPILE_QTOPENGL)
 set(ARGOS3_HEADERS_PLUGINS_SIMULATOR_PHYSICS_ENGINES_DYNAMICS3D_SPHERE
   ${ARGOS3_HEADERS_PLUGINS_SIMULATOR_PHYSICS_ENGINES_DYNAMICS3D_SPHERE}
   sphere/qtopengl_sphere.h)
 set(ARGOS3_SOURCES_PLUGINS_SIMULATOR_PHYSICS_ENGINES_DYNAMICS3D_SPHERE
   ${ARGOS3_SOURCES_PLUGINS_SIMULATOR_PHYSICS_ENGINES_DYNAMICS3D_SPHERE}
#   simulator/qtopengl_robot.h
   sphere/qtopengl_sphere.cpp)
endif(ARGOS_COMPILE_QTOPENGL)

#
# Create dynamics3d engine plugin library
#
# Create library
add_library(argos3plugin_${ARGOS_BUILD_FOR}_dynamics3d SHARED
  ${ARGOS3_SOURCES_PLUGINS_SIMULATOR_PHYSICS_ENGINES_DYNAMICS3D_BULLET}
  ${ARGOS3_SOURCES_PLUGINS_SIMULATOR_PHYSICS_ENGINES_DYNAMICS3D}
  ${ARGOS3_SOURCES_PLUGINS_SIMULATOR_PHYSICS_ENGINES_DYNAMICS3D_SPHERE}
  ${ARGOS3_HEADERS_PLUGINS_SIMULATOR_PHYSICS_ENGINES_DYNAMICS3D_SPHERE})
target_link_libraries(argos3plugin_${ARGOS_BUILD_FOR}_dynamics3d ${BULLET_LIBRARIES})
install(TARGETS argos3plugin_${ARGOS_BUILD_FOR}_dynamics3d
  RUNTIME DESTINATION bin
  LIBRARY DESTINATION lib/argos3
  ARCHIVE DESTINATION lib/argos3)
  
#add_subdirectory(plugins)

